//: Playground - noun: a place where people can play

import UIKit

//MARK: - Array

var arr = [Int]()

arr = Array(repeating: 5, count: 3)

for (index, value) in arr.enumerated(){
    print(index, value)
}

//Enumerated(): Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.


//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//MARK: - Set:T·∫≠p h·ª£p ko c√≥ th·ª© t·ª±, in ra s·∫Ω ƒë·∫£o lung tung v·ªã tr√≠ c√°c ph·∫ßn t·ª≠
var starWarSet:Set<String> = ["Skywalker", "Luke", "Yoda"]
starWarSet.insert("Leia")
print(starWarSet)
starWarSet.sorted()
starWarSet.remove("Luke")
starWarSet.remove("Squall")

if starWarSet.contains("Skywalker") {
    print("List contain this string")
}

let set1:Set = [1,2,3,4,5,6]
let set2:Set = [3,4,7,8,9,0]

let set3 = set1.intersection(set2) //L·∫•y giao c·ªßa 2 set
print(set3)

let set4 = set1.union(set2).sorted() //L·∫•y h·ª£p c·ªßa 2 set
print(set4)

let set5 = set1.subtracting(set2) //L·∫•y nh·ªØng ph·∫ßn t·ª≠ thu·ªôc 1 nh∆∞ng ko thu·ªôc 2
print(set5)

let set6 = set1.symmetricDifference(set2).sorted() //L·∫•y nh·ªØng ph·∫ßn t·ª≠ kh√°c nhau/ Ng∆∞·ª£c l·∫°i c·ªßa intersection

let fruits:Set = ["üçé", "üçê"]
let fruitsAndDrinks:Set = ["üçé", "üçê", "üç∫", "ü•õ"]
fruitsAndDrinks.isSuperset(of: fruits) //C√≥ ph·∫£i t·∫≠p cha
fruits.isSubset(of: fruitsAndDrinks) //C√≥ ph·∫£i t·∫≠p con

let animals = ["üê∏", "ü¶ä", "üêº"]
fruits.isDisjoint(with: animals) //Kh√°c ho√†n to√†n


//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//MARK: - Dictionary
let myDict = ["Name":"Squall", "Age":"29", "Gender":"Male"]
let allValues = [String](myDict.values)

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//MARK: - For
for i in stride(from: 1, to: 12, by: 3){
    print("aloha ", i)
}

// - While
var startValue = 0
while startValue < 10{
    startValue += 1
    if startValue == 5 {
        continue //ko check code trong m·ª•c n√†y n·ªØa
    }
    print(startValue)
}

var aString = "I am a man"
print("String before: \(aString)")
func inoutFunction(_ a: inout String){
    a = "I am a hero"
}
inoutFunction(&aString)
print("String after: \(aString)")

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//MARK: - Closure
var char = ["bcd", "ab", "xyz", "defg", "hi"]
var sortCharacter = char.sorted { (s1: String, s2:String) -> Bool in
    return s1 > s2 //s·∫Øp x·∫øp theo ƒëi·ªÅu ki·ªán
}

let someNums = [1,2,3,4,5,6]
var squaredNum = someNums.map { (someNum) -> Int in
    return someNum * someNum
}

//Thay ƒë·ªïi gi√° tr·ªã ban ƒë·∫ßu c·ªßa struct, enum.. th√™m mutating

//C√°ch g·ªçi closure trong switch case
//vd:
var things = [Any]()
things.append({(name:String) -> String in "Hello, \(name)" })
for thing in things{
    switch thing {
    case let stringInClosure as (String) -> String:
        //do wtf you want
        print("Squall no 1")
    default:
        print("smt else")
    }
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//MARK: - Protocol - delegate
//Delegate trao quy·ªÅn cho 1 ƒë·ªëi t∆∞·ª£ng n√†o ƒë·∫•y th·ª±c hi·ªán 1 s·ªë ch·ª©c nƒÉng n√†o ƒë√≥, trong qu√° tr√¨nh th·ª±c hi·ªán th√¨ ph·∫£i g·ªçi l·∫°i c√°c ph∆∞∆°ng th·ª©c trong protocol




